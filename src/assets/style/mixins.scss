//основные параметры псевдо элементов (контент, дисплэй, позиционирование)
@mixin pseudo($content: "", $display: block, $pos: absolute) {
  content: $content;
  display: $display;
  position: $pos;
}

//псевдо блок ::before (ширина, высота, контент, дисплэй, позиционирование)
@mixin pseudo-before(
  $width,
  $height,
  $content: "",
  $display: block,
  $pos: absolute
) {
  &::before {
    width: $width;
    height: $height;
    content: $content;
    display: $display;
    position: $pos;
    box-sizing: border-box;
  }
}

//псевдо блок ::after (ширина, высота, контент, дисплэй, позиционирование)
@mixin pseudo-after(
  $width,
  $height,
  $content: "",
  $display: block,
  $pos: absolute
) {
  &::after {
    width: $width;
    height: $height;
    content: $content;
    display: $display;
    position: $pos;
    box-sizing: border-box;
  }
}

//псевдо распорка для флоатных блоков
@mixin clearfix() {
  &::after {
    display: table;
    content: "";
    clear: both;
  }
}

//абсолютный центровщик горизонтальный (позиционирование)
@mixin center-x($position: absolute) {
  position: $position;
  left: 50%;
  transform: translateX(-50%);
}

//абсолютный центровщик вертикальный (позиционирование)
@mixin center-y($position: absolute) {
  position: $position;
  top: 50%;
  transform: translateY(-50%);
}

//абсолютный центровщик горизонтальный и вертикальный (позиционирование, горизонтально, вертикально)
@mixin center-x-y($position: absolute) {
  position: $position;
  top: 50%;
  left: 50%;
  transform: translateX(-50%) translateY(-50%);
}

//абсолютный центровщик горизонтальный на margin(половина ширины)
@mixin center-x-margin($margin-left: 10px) {
  position: absolute;
  left: 50%;
  margin-left: -$margin-left;
}

//абсолютный центровщик вертикальный на margin(половина высоты)
@mixin center-y-margin($margin-top: 10px) {
  position: absolute;
  top: 50%;
  margin-top: -$margin-top;
}

//основной контейнер страницы (ширина, внутренние горизонтальные отступы)
@mixin container($width, $padding-x: false) {
  margin: {
    left: auto;
    right: auto;
  }
  @if ($padding-x) {
    padding: {
      left: $padding-x;
      right: $padding-x;
    }
  }
  width: $width;
  box-sizing: border-box;
}

@function strip-unit($number) {
  @if type-of($number) == "number" and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }
  @return $number;
}

@function calcResponsiveSize(
  $f-min,
  $f-max,
  $w-min: $desktop__container-min-width,
  $w-max: $desktop__container-max-width,
  $units: px
) {
  $f-min: strip-unit($f-min);
  $f-max: strip-unit($f-max);
  $w-min: strip-unit($w-min);
  $w-max: strip-unit($w-max);
  $k: ($f-max - $f-min)/ ($w-max - $w-min);
  $b: $f-min - $k * $w-min;
  $b: $b + $units;
  @return calc(#{$k} * 100vw + #{$b});
}

//шрифт 1-й (размер шрифта, высота строки, цвет, толщина шрифта, строчные или прописные)
@mixin font--1(
  $size: false,
  $lh: false,
  $color: false,
  $weight: false,
  $transform: false
) {
  font-family: $font-family--1;
  @if $size {
    font-size: $size;
  }
  @if $lh {
    line-height: $lh;
  }
  @if $color {
    color: $color;
  }
  @if $weight {
    font-weight: $weight;
  }
  @if $transform {
    text-transform: $transform;
  }
}

//шрифт 2-й (размер шрифта, высота строки, цвет, толщина шрифта, строчные или прописные)
@mixin font--2(
  $size: false,
  $lh: false,
  $color: false,
  $weight: false,
  $transform: false
) {
  font-family: $font-family--2;
  @if $size {
    font-size: $size;
  }
  @if $lh {
    line-height: $lh;
  }
  @if $color {
    color: $color;
  }
  @if $weight {
    font-weight: $weight;
  }
  @if $transform {
    text-transform: $transform;
  }
}

//шрифт 3-й (размер шрифта, высота строки, цвет, толщина шрифта, строчные или прописные)
@mixin font--3(
  $size: false,
  $lh: false,
  $color: false,
  $weight: false,
  $transform: false
) {
  font-family: $font-family--3;
  @if $size {
    font-size: $size;
  }
  @if $lh {
    line-height: $lh;
  }
  @if $color {
    color: $color;
  }
  @if $weight {
    font-weight: $weight;
  }
  @if $transform {
    text-transform: $transform;
  }
}

//шрифт иконочный  (код символа)
@mixin font--icon($content: false) {
  @if ($content) {
    content: "#{$content}";
  }
  font-family: $font-family--icon;
  font-weight: normal;
  line-height: 1em;
  text-align: center;
  text-transform: none;
  text-decoration: inherit;
  font-style: normal;
  font-variant: normal;
  speak: none;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

//скрытый текст (для семантики), доступный для читалок
@mixin invisible-text() {
  position: absolute;
  width: 1px;
  height: 1px;
  margin: -1px;
  padding: 0;
  overflow: hidden;
  white-space: nowrap;
  border: 0;
  clip: rect(0, 0, 0, 0);
}

//сброс оформления текста
@mixin reset-text() {
  font-style: normal;
  font-weight: normal;
  text-align: left;
  text-decoration: none;
  text-shadow: none;
  text-transform: none;
  letter-spacing: normal;
  word-break: normal;
  word-spacing: normal;
  white-space: normal;
  line-break: auto;
}

//горизонтальная линия по краям текста (толщина, цвет)
@mixin textLine($weight, $color) {
  @include pseudo-after(100%, $weight);
  position: relative;
  &::after {
    @include center-y();
    background: $color;
  }
}

// имитация пунктирной линии (толщина линии, длинна линии)
@mixin dashed($height: 2px, $width: 100%) {
  @include pseudo-after($width, $height);
  position: relative;
  &::after {
    background: linear-gradient(to right, #ffffff, #ffffff 60%, transparent 60%)
      0 0 / 10px 100% repeat-x;
  }
}

// имитация точек (толщина, цвет, длинна линии)
@mixin dotted($weight, $color: currentColor, $width: 100%) {
  @include pseudo-after($width, $weight);
  background: linear-gradient(to right, $color, transparent, transparent)
    repeat-x 0 0 / $weight * 4 $weight;
}

//ограничитель размера изображения
@mixin img-size() {
  max-width: 100%;
  height: auto;
}

/*
//выбор фонового изображения для retina
@mixin img-retina($file-1x, $file-2x, $width-1x, $height-1x) {
  background-image: url($file-1x);
  @media only screen and (min-resolution: 192dpi),
    // IE9-11 don't support dppx only screen and (min-resolution: 2dppx) {
    // Standardized
    background-image: url($file-2x);
    background-size: $width-1x $height-1x;
  }
}
*/

//задержка при скрытии выпадающего меню (состояние видимости меню)
@mixin drop-menu-delay($show: false) {
  @if $show {
    visibility: visible;
    opacity: 1; /* Показываем подменю при ховере */
  } @else {
    visibility: hidden;
    opacity: 0; /* По умолчанию скрываем подменю */
    transition: opacity, visibility 0.3s ease 0.15s; /* анимация 0.3 сек. и задержка в 0.15 сек. */
  }
}

//чекбокс внешняя рамка (ширина, высота, фон)
@mixin checkbox-out($width, $height, $background: false) {
  @include pseudo();
  width: $width;
  height: $height;
  @if ($background) {
    background: $background;
  }
}

//чекбокс середина (ширина, высота, толщина, цвет)
@mixin checkbox-in($width, $height, $border, $color) {
  @include pseudo();
  display: none;
  width: $width;
  height: $height;
  transform: rotate(-45deg);
  border: $border solid $color;
  border-top-color: transparent;
  border-right-color: transparent;
}

//крестик для закрытия попапов (ширина блока, высота блока, длинна палочек, толщина палочек, цвет палочек)
@mixin modal-close(
  $Bwidth: 40px,
  $Bheight: 40px,
  $Xwidth: 26px,
  $Xheight: 6px,
  $Xcolor: red
) {
  position: absolute;
  box-sizing: border-box;
  width: $Bwidth;
  height: $Bheight;
  cursor: pointer;
  @include pseudo-before($Xwidth, $Xheight);
  @include pseudo-after($Xwidth, $Xheight);
  &::before,
  &::after {
    position: absolute;
    top: 50%;
    left: 50%;
    background: $Xcolor;
    transform: translateX(-50%) translateY(-50%) rotate(45deg);
  }
  &::after {
    transform: translateX(-50%) translateY(-50%) rotate(-45deg);
  }
}

//Треугольник (цвет, направление, размер, закругление краев, позиционирование)
@mixin triangle(
  $color,
  $direction,
  $size: 6px,
  $round: false,
  $position: absolute
) {
  @include pseudo($pos: $position);
  width: 0;
  height: 0;
  @if $round {
    border-radius: $round;
  }
  @if $direction == bottom {
    border-left: $size solid transparent;
    border-right: $size solid transparent;
    border-top: $size solid $color;
    margin-top: 0 - round($size / 2.5);
  } @else if $direction == top {
    border-left: $size solid transparent;
    border-right: $size solid transparent;
    border-bottom: $size solid $color;
    margin-bottom: 0 - round($size / 2.5);
  } @else if $direction == right {
    border-top: $size solid transparent;
    border-bottom: $size solid transparent;
    border-left: $size solid $color;
    margin-right: -$size;
  } @else if $direction == left {
    border-top: $size solid transparent;
    border-bottom: $size solid transparent;
    border-right: $size solid $color;
    margin-left: -$size;
  }
}

//граница контейнера в виде клина (цвет, ширина стороны угла, высота угла)
@mixin triangle-container($background, $direction, $width, $height) {
  position: relative;
  &::after {
    @include triangle($background, $direction, $height);
    @include center();
    bottom: -1 * $height;
    border-right-width: $width;
    border-left-width: $width;
    z-index: 2000;
  }
}

//граница контейнера в виде краев от клина (цвет, расположение (наоборот), ширина стороны угла, высота угла)
@mixin triangle-container-edge($background, $direction, $width, $height) {
  position: relative;
  &::before {
    @include triangle(transparent, $direction, $height);
    z-index: 2000;
    @if ($direction == bottom) {
      @include center();
      top: -1 * $height + $height * 0.4;
      border-right: $width solid $background;
      border-left: $width solid $background;
    }
    @if ($direction == top) {
      @include center();
      bottom: -1 * $height + $height * 0.4;
      border-right: $width solid $background;
      border-left: $width solid $background;
    }
    @if ($direction == left) {
      @include center(absolute, false, true);
      right: -1 * $height;
      border-top: $width solid $background;
      border-bottom: $width solid $background;
    }
    @if ($direction == right) {
      @include center(absolute, false, true);
      left: -1 * $height;
      border-top: $width solid $background;
      border-bottom: $width solid $background;
    }
  }
}

// косой угол у элемента
@mixin angle-left($width, $height, $color) {
  @include triangle(transparent, bottom, $height);
  left: -$width;
  bottom: 0;
  border-right-color: $color;
  border-right-width: $width;
  border-left-width: 0;
}

//Значек раскрывающегося меню (цвет полос, цвет полос при наведении, ширина значка, высота значка, толщина полос, количество полос )
@mixin hamburger(
  $color: black,
  $color-hover: red,
  $width: 20px,
  $height: 16px,
  $weight: 2px,
  $bars: 3
) {
  $shadow: ();
  $hover-shadow: ();
  $spacing: ($height - ($weight * $bars)) / ($bars - 1);
  @if unit($spacing) == "px" {
    $spacing: floor($spacing);
  }
  @for $i from 2 through $bars {
    $offset: ($weight + $spacing) * ($i - 1);
    $shadow: append($shadow, 0 $offset 0 $color, comma);
  }
  position: relative;
  display: inline-block;
  vertical-align: middle;
  width: $width;
  height: $height;
  cursor: pointer;
  &::after {
    position: absolute;
    top: 0;
    left: 0;
    display: block;
    width: 100%;
    height: $weight;
    background: $color;
    box-shadow: $shadow;
    content: "";
  }
  @if $color-hover {
    @for $i from 2 through $bars {
      $offset: ($weight + $spacing) * ($i - 1);
      $hover-shadow: append($hover-shadow, 0 $offset 0 $color-hover, comma);
    }
    &:hover::after {
      background: $color-hover;
      box-shadow: $hover-shadow;
    }
  }
}

//градиент двухцветный горизонтальный (цвет начала, цвет конца, позиция начала, позиция конца)
@mixin gradient-x(
  $start-color: #555555,
  $end-color: #333333,
  $start-percent: 0%,
  $end-percent: 100%
) {
  background-image: linear-gradient(
    to right,
    $start-color $start-percent,
    $end-color $end-percent
  );
  background-repeat: repeat-x;
}

//градиент двухцветный вертикальный (цвет начала, цвет конца, позиция начала, позиция конца)
@mixin gradient-y(
  $start-color: #555555,
  $end-color: #333333,
  $start-percent: 0%,
  $end-percent: 100%
) {
  background-image: linear-gradient(
    to bottom,
    $start-color $start-percent,
    $end-color $end-percent
  );
  background-repeat: repeat-x;
}

//градиент двухцветный под углом (цвет начала, цвет конца, угол)
@mixin gradient-directional(
  $start-color: #555555,
  $end-color: #333333,
  $deg: 45deg
) {
  background-image: linear-gradient($deg, $start-color, $end-color);
  background-repeat: repeat-x;
}

@mixin gradient-x__3-colors(
  $start-color: #00b3ee,
  $mid-color: #7a43b6,
  $color-stop: 50%,
  $end-color: #c3325f
) {
  background-image: linear-gradient(
    to right,
    $start-color,
    $mid-color $color-stop,
    $end-color
  );
  background-repeat: no-repeat;
}

@mixin gradient-y__3-colors(
  $start-color: #00b3ee,
  $mid-color: #7a43b6,
  $color-stop: 50%,
  $end-color: #c3325f
) {
  background-image: linear-gradient(
    $start-color,
    $mid-color $color-stop,
    $end-color
  );
  background-repeat: no-repeat;
}

@mixin gradient-radial($inner-color: #555555, $outer-color: #333333) {
  background-image: radial-gradient(circle, $inner-color, $outer-color);
  background-repeat: no-repeat;
}

@mixin gradient-striped($color: rgba(255, 255, 255, 0.15), $angle: 45deg) {
  background-image: linear-gradient(
    $angle,
    $color 25%,
    transparent 25%,
    transparent 50%,
    $color 50%,
    $color 75%,
    transparent 75%,
    transparent
  );
}
